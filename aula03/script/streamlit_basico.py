# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

# --- Configura√ß√£o da P√°gina ---
# Define o t√≠tulo da p√°gina, o √≠cone e o layout.
# "wide" faz com que o conte√∫do ocupe toda a largura da tela.
st.set_page_config(page_title="Explorador de Expectativa de Vida", layout="wide")

# --- T√≠tulo e Descri√ß√£o ---
# Exibe o t√≠tulo principal da aplica√ß√£o.
st.title("üåç Gapminder Explorer")
# Fornece uma breve instru√ß√£o sobre como usar a aplica√ß√£o.
st.markdown("Filtre por ano e continente para explorar dados de popula√ß√£o e expectativa de vida.")

# --- Carregamento de Dados ---
# A anota√ß√£o @st.cache_data garante que os dados sejam carregados apenas uma vez,
# melhorando a performance da aplica√ß√£o. O resultado da fun√ß√£o √© armazenado em cache.
@st.cache_data
def load_data():
    # Carrega o conjunto de dados 'gapminder' que vem com a biblioteca Plotly Express.
    return px.data.gapminder()

# Chama a fun√ß√£o para carregar os dados.
df = load_data()

# --- Barra Lateral (Sidebar) com Filtros ---
# Cria um cabe√ßalho para a se√ß√£o de filtros na barra lateral.
st.sidebar.header("Filtros")
# Cria um slider para selecionar o ano.
# Os valores m√≠nimo e m√°ximo s√£o definidos dinamicamente a partir dos dados.
# O valor padr√£o √© 2007.
year = st.sidebar.slider("Ano", int(df.year.min()), int(df.year.max()), 2007)
# Cria uma caixa de sele√ß√£o m√∫ltipla para os continentes.
# As op√ß√µes s√£o os continentes √∫nicos presentes no DataFrame.
# Por padr√£o, todos os continentes v√™m selecionados.
continents = st.sidebar.multiselect(
    "Continente", options=df.continent.unique(), default=df.continent.unique()
)

# --- Filtragem dos Dados ---
# Filtra o DataFrame com base no ano e nos continentes selecionados pelo usu√°rio.
df_filt = df[(df.year == year) & (df.continent.isin(continents))]

# --- M√©tricas Resumidas ---
# Cria tr√™s colunas para exibir m√©tricas lado a lado.
col1, col2, col3 = st.columns(3)
# Exibe o n√∫mero de registros (linhas) no DataFrame filtrado.
col1.metric("Registros", len(df_filt))
# Exibe a expectativa de vida m√≠nima, formatada com uma casa decimal.
col2.metric("M√≠n. Vida", f"{df_filt.lifeExp.min():.1f}")
# Exibe a expectativa de vida m√°xima, formatada com uma casa decimal.
col3.metric("M√°x. Vida", f"{df_filt.lifeExp.max():.1f}")

# Adiciona uma linha horizontal para separar se√ß√µes.
st.markdown("---")

# --- Layout Principal: Tabela e Gr√°fico ---
# Cria duas colunas para organizar o conte√∫do principal.
# A coluna da direita (right) ser√° duas vezes mais larga que a da esquerda (left).
left, right = st.columns((1, 2))

# --- Coluna da Esquerda: Tabela de Dados ---
with left:
    # Adiciona um subt√≠tulo para a se√ß√£o de dados.
    st.subheader("Dados")
    # Exibe o DataFrame filtrado em uma tabela interativa.
    # 'reset_index(drop=True)' reinicia o √≠ndice para uma melhor visualiza√ß√£o.
    # 'use_container_width=True' faz a tabela ocupar toda a largura da coluna.
    st.dataframe(df_filt.reset_index(drop=True), use_container_width=True)

# --- Coluna da Direita: Gr√°fico de Dispers√£o ---
with right:
    # Adiciona um subt√≠tulo para a se√ß√£o do gr√°fico.
    st.subheader("Expectativa vs PIB per capita")
    # Cria um gr√°fico de dispers√£o (scatter plot) com Plotly Express.
    fig = px.scatter(
        df_filt,
        x="gdpPercap",          # Eixo X: PIB per capita
        y="lifeExp",            # Eixo Y: Expectativa de vida
        size="pop",             # Tamanho da bolha: Popula√ß√£o
        color="continent",      # Cor da bolha: Continente
        hover_name="country",   # Texto ao passar o mouse: Nome do pa√≠s
        log_x=True,             # Eixo X em escala logar√≠tmica para melhor visualiza√ß√£o
        size_max=60,            # Tamanho m√°ximo das bolhas
        title=f"{year} ‚Äì Vida vs PIB", # T√≠tulo do gr√°fico din√¢mico com o ano
    )
    # Exibe o gr√°fico Plotly na aplica√ß√£o.
    # 'use_container_width=True' faz o gr√°fico ocupar toda a largura da coluna.
    st.plotly_chart(fig, use_container_width=True)
